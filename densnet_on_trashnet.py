# -*- coding: utf-8 -*-
"""DensNet_on_Trashnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Efr_7FaaHBv6gorPqSmpfaHgmiKzaNKk
"""

from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

import os
drive_path = '/content/drive/MyDrive/'

# Folder name where you uploaded the dataset
dataset_folder_name = 'trashnet'

# Path to the dataset
dataset_path = os.path.join(drive_path, dataset_folder_name)

# Verify that the dataset is accessible
os.listdir(dataset_path)

import os
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Path to the dataset on Google Drive
drive_path = '/content/drive/MyDrive/'

# Folder name where you uploaded the dataset
dataset_folder_name = 'trashnet'

# Path to the dataset
dataset_path = os.path.join(drive_path, dataset_folder_name)

# Define image size and batch size
img_size = (224, 224)
batch_size = 32

# Use ImageDataGenerator for data augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Load and augment the training dataset
train_generator = train_datagen.flow_from_directory(
    dataset_path,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical'
)

# Build a simple CNN model
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(len(train_generator.class_indices), activation='softmax'))

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(train_generator, epochs=1)  # Adjust the number of epochs as needed

# Save the trained model
loaded_model=model.save('/content/drive/MyDrive/trashnet_model.h5')